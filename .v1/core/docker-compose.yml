
# sudo docker compose --file=./docker-compose.yml up --force-recreate --build

# https://www.beekeeperstudio.io/
# https://hoppscotch.io/
# https://docs.docker.com/compose/reference/
# https://docs.docker.com/engine/install/ubuntu/
# https://docs.docker.com/compose/compose-file/build/
# https://docs.docker.com/compose/compose-file/compose-versioning/

# Crestfall Studio: Production Build for Crestfall Core
# cd ./studio/
# npm install

# Crestfall Core: Production Build
# cd ./core/
# sudo docker compose --env-file ../.env up
# sudo docker compose up
# sudo docker compose up --detach

# Crestfall Core: Commands
# sudo rm -rf ./volumes/
# sudo docker compose up
# sudo docker compose down

# Auth
# https://hub.docker.com/_/node

# PostgreSQL
# https://hub.docker.com/_/postgres
# https://github.com/docker-library/docs/blob/master/postgres/README.md
# https://github.com/supabase/supabase/blob/master/docker/docker-compose.yml
# https://github.com/supabase/supabase/tree/master/docker/volumes/db/init
# https://github.com/supabase/postgres/tree/develop/ansible/tasks/postgres-extensions
# https://github.com/subzerocloud/postgrest-starter-kit/blob/master/docker-compose.yml
# https://gist.github.com/leopoldodonnell/b0b7e06943bd389560184d948bdc2d5b

# PostgREST
# https://hub.docker.com/r/postgrest/postgrest/
# https://www.postgresql.org/docs/current/libpq-connect.html
# https://postgrest.org/en/stable/configuration.html
# https://postgrest.org/en/stable/tutorials/tut0.html
# https://postgrest.org/en/stable/tutorials/tut1.html
# http://0.0.0.0:5433/todos

# TypeSense
# https://hub.docker.com/r/typesense/typesense
# https://typesense.org/docs/0.23.1/api/server-configuration.html
# https://typesense.org/docs/guide/docker-swarm-high-availability.html
# http://0.0.0.0:8108/metrics.json?x-typesense-api-key=crestfall

version: '3.8'

services:

  postgresql:
    build:
      context: .
      dockerfile: ./postgresql/Dockerfile
    restart: "no"
    network_mode: "host" # 5432
    command: postgres -c shared_preload_libraries=pgaudit # pg_cron,pgsodium,pgaudit
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: ${POSTGRES_USER:?error} # postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?error} # postgres
    volumes:
      - ./postgresql/init:/docker-entrypoint-initdb.d
      - ./volumes/postgresql/data:/var/lib/postgresql/data

  postgrest:
    image: postgrest/postgrest
    network_mode: "host" # 5433
    environment:
      PGRST_DB_ANON_ROLE: anon
      PGRST_DB_SCHEMAS: ${PGRST_DB_SCHEMAS:?error} # public
      PGRST_DB_EXTRA_SEARCH_PATH: ${PGRST_DB_EXTRA_SEARCH_PATH:?error} # public,extensions
      PGRST_DB_URI: postgres://${POSTGRES_USER:?error}:${POSTGRES_PASSWORD:?error}@0.0.0.0:5432/postgres
      PGRST_SERVER_PORT: 5433
      PGRST_JWT_SECRET: ${PGRST_JWT_SECRET:?error} # crestfall
      PGRST_JWT_SECRET_IS_BASE64: ${PGRST_JWT_SECRET_IS_BASE64:?error} # true
      PGRST_JWT_AUD: crestfall
    depends_on:
      - postgresql

  typesense:
    image: typesense/typesense:0.23.1
    network_mode: "host" # 8108
    environment:
      TYPESENSE_DATA_DIR: /var/lib/typesense/data
      TYPESENSE_API_KEY: ${TYPESENSE_API_KEY:?error} # crestfall
      TYPESENSE_API_PORT: 8108
      TYPESENSE_ENABLE_CORS: true
    depends_on:
      - postgresql
    volumes:
      - ./volumes/typesense/data:/var/lib/typesense/data

  auth:
    build:
      context: ../ # path of parent directory
      dockerfile: ./auth/Dockerfile # path relative to context
    restart: "no"
    network_mode: "host" # 9090
    command: node ./index.mjs
    depends_on:
      - postgrest
  
  caddy:
    image: caddy:2
    network_mode: "host" # 80, 443, 443/udp
    volumes:
      - ./volumes/caddy/data:/data
      - ./volumes/caddy/config:/config
      - ./volumes/caddy/logs:/var/log/caddy/
      - ./caddy/Caddyfile.cdf:/etc/caddy/Caddyfile
    extra_hosts:
      - host.docker.internal:host-gateway